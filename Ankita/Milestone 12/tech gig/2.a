#include <stdio.h>

// Function to print alternating rectangles of 0 and X
void fill0X(int m, int n)
{
	/* k - starting row index
		m - ending row index
		l - starting column index
		n - ending column index
		i - iterator */
	int i, k = 0, l = 0;

	// Store given number of rows and columns for later use
	int r = m, c = n;

	// A 2D array to store the output to be printed
	char a[m][n];
	char x = 'X'; // Iniitialize the character to be stoed in a[][]

	// Fill characters in a[][] in spiral form. Every iteration fills
	// one rectangle of either Xs or Os
	while (k < m && l < n)
	{
		/* Fill the first row from the remaining rows */
		for (i = l; i < n; ++i)
			a[k][i] = x;
		k++;

		/* Fill the last column from the remaining columns */
		for (i = k; i < m; ++i)
			a[i][n-1] = x;
		n--;

		/* Fill the last row from the remaining rows */
		if (k < m)
		{
			for (i = n-1; i >= l; --i)
				a[m-1][i] = x;
			m--;
		}

		/* Print the first column from the remaining columns */
		if (l < n)
		{
			for (i = m-1; i >= k; --i)
				a[i][l] = x;
			l++;
		}

		// Flip character for next iteration
		x = (x == '0')? 'X': '0';
	}

	// Print the filled matrix
	for (i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
			printf("%c ", a[i][j]);
		printf("\n");
	}
}

/* Driver program to test above functions */
int main()
{
	puts("Output for m = 5, n = 6");
	fill0X(5, 6);

	puts("\nOutput for m = 4, n = 4");
	fill0X(4, 4);

	puts("\nOutput for m = 3, n = 4");
	fill0X(3, 4);

	return 0;
}
//************************************************************************************************************************************************************************************************************
#include <iostream>
#include <stdio.h>
using namespace std;
int main()
{
	//Write code here
	int m, n, i, j;
	scanf("%d%d", &m, &n);
	char mat[m][n], turn = 'X';
	int k = m, l = n, ref_j = n, ref_i = m, p = m*n;
	if (n >= 1 && n <= 1000 && m >= 1 && m <= 1000)
	{
		while (p > 0)
		{
			j = n-ref_j;
			for (i = m - ref_i; i < ref_i; i++)
			{
				if (turn == 'X')
				{
					mat[i][j] = 'X';
					p--;
				}
				else if (turn  == '0')
				{
					mat[i][j] = '0';
					p--;
				}
			}
			p++;
			j = ref_j - 1;
			for (i = m - ref_i; i < ref_i; i++)
			{
				if (turn == 'X')
				{
					mat[i][j] = 'X';
					p--;
				}
				else if (turn  == '0')
				{
					mat[i][j] = '0';
					p--;
				}
			}
			p++;
			i = m - ref_i;
			for (j = n - ref_j; j < ref_j; j++)
			{
				if (turn == 'X')
				{
					mat[i][j] = 'X';
					p--;
				}
				else if (turn  == '0')
				{
					mat[i][j] = '0';
					p--;
				}
			}
			p++;
			i = ref_i -  1;
			for (j = n - ref_j; j < ref_j; j++)
			{
				if (turn == 'X')
				{
					mat[i][j] = 'X';
					p--;
				}
				else if (turn  == '0')
				{
					mat[i][j] = '0';
					p--;
				}
			}
			p++;
			if (turn == 'X')
			turn ='0';
			else
			turn = 'X';
			ref_i--;
			ref_j--;
		}
		for (i = 0; i < m; i++)
		{
			for (j = 0; j < n; j++)
			{
				printf("%c",mat[i][j]);
				if (j < n-1)
				printf (" ");
			}
			if (i < m-1)
			printf ("\n");
		}
	}
}
