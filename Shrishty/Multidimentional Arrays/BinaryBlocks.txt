#include<bits/stdc++.h>
using namespace std;
int board[2501][2501];
int dp[2501][2501];
int n, m;
int res = INT_MAX;
 
void clear(){
	for(int i = 0; i < 2501; i++){
		for(int j = 0; j < 2501; j++){
			board[i][j] = 0;
			dp[i][j] = 0;
		}
	}
}
 
int value(int i, int j){
    if(i>n && j>m) 
		return dp[n][m];
    if(i>n) 
		return dp[n][j];
    if(j>m) 
		return dp[i][m];
    return dp[i][j];
}
     
int cal(int i, int j, int k){
    return value(i,j) - value(i-k,j) - value(i,j-k) + value(i-k,j-k);
}
 
int changeRequired(int k){
    int count = 0;
    for (int i=k; i<=(n+k); i+=k){
    	for (int j=k; j<=(m+k); j+=k){
    		int tmp = cal(i,j,k);
    		count += min(tmp, (k*k) - tmp);
    	}
    }
    return count;
}
 
int main(){
	clear();
	string s;
	cin >> n >> m;
	for(int i = 1; i <= n; i++){
		cin >> s;
		for(int j = 1; j <= m; j++){
			if(s[j-1] == '1')
				board[i][j] = 1;
			else
				board[i][j] = 0;
		}	
	}
 
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++){
			if(board[i][j] == 1)
				dp[i][j] = dp[i][j-1] + 1;
			else
				dp[i][j] = dp[i][j-1];
		}
	}
	for(int j = 1; j <= m; j++){
		for(int i = 1; i <= n; i++)
			dp[i][j] = dp[i-1][j] + dp[i][j];
	}
 
	for(int k = 2; k <= max(n,m); k++)
		res = min(res, changeRequired(k));
	cout << res;
	return 0;
}