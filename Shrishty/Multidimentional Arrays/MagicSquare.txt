#include <bits/stdc++.h>
using namespace std;
int cal(vector<vector<int>> m,vector<vector<int>> s)
{
    int i,j,corr=0;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(m[i][j]!=s[i][j])
            {
                corr+=abs(m[i][j]-s[i][j]);
            }
        }
    }
    return corr;
}
vector<vector<int>> tran(vector<vector<int>> s)
{
    vector<vector<int>> ans(s.begin(),s.end());
    int i,j;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            ans[i][j]=(s[j][i]);
        }
    }
    return ans;
}
// Complete the formingMagicSquare function below.
int formingMagicSquare(vector<vector<int>> s) 
{
    vector<vector<int>> m1={{2,7,6},{9,5,1},{4,3,8}};
    vector<vector<int>> m2={{6,1,8},{7,5,3},{2,9,4}};
    vector<vector<int>> m3={{8,3,4},{1,5,9},{6,7,2}};
    vector<vector<int>> m4={{4,9,2},{3,5,7},{8,1,6}};
    int ans;
    ans=cal(m4,s);
    ans=min(ans,cal(tran(m4),s));
    ans=min(ans,cal(m3,s));
    ans=min(ans,cal(tran(m3),s));
    ans=min(ans,cal(m2,s));
    ans=min(ans,cal(tran(m2),s));
    ans=min(ans,cal(m1,s));
    ans=min(ans,cal(tran(m1),s));
    
    return ans;
}
int main()
{
    //ofstream fout(getenv("OUTPUT_PATH"));
    vector<vector<int>> s(3);
    for (int i = 0; i < 3; i++) {
        s[i].resize(3);
        for (int j = 0; j < 3; j++) {
            cin >> s[i][j];
        }
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }
    int result = formingMagicSquare(s);
    cout << result << "\n";
    //fout.close();
    return 0;
}